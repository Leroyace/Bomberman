#include "Map.h"
#include "ResourcePath.hpp"

const int Map::INTERSECTION_MAP[ROW_COUNT][COLUMN_COUNT] = {
    { 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01},
    { 01, 10, 03, 03, 03, 10, 02, 04, 02, 10, 02, 04, 02, 10, 02, 04, 02, 10, 02, 04, 02, 10, 03, 03, 03, 10, 01},
    { 01, 03, 01, 01, 01, 02, 01, 01, 01, 02, 01, 01, 01, 02, 01, 01, 01, 02, 01, 01, 01, 02, 01, 01, 01, 03, 01},
    { 01, 03, 01, 01, 01, 06, 01, 01, 01, 06, 01, 01, 01, 06, 01, 01, 01, 06, 01, 01, 01, 06, 01, 01, 01, 03, 01},
    { 01, 03, 01, 01, 01, 02, 01, 01, 01, 02, 01, 01, 01, 02, 01, 01, 01, 02, 01, 01, 01, 02, 01, 01, 01, 03, 01},
    { 01, 10, 02, 04, 02, 10, 02, 04, 02, 10, 02, 04, 02, 10, 02, 04, 02, 10, 02, 04, 02, 10, 02, 04, 02, 10, 01},
    { 01, 02, 01, 01, 01, 02, 01, 01, 01, 02, 01, 01, 01, 02, 01, 01, 01, 02, 01, 01, 01, 02, 01, 01, 01, 02, 01},
    { 01, 06, 01, 01, 01, 06, 01, 01, 01, 06, 01, 01, 01, 06, 01, 01, 01, 06, 01, 01, 01, 06, 01, 01, 01, 06, 01},
    { 01, 02, 01, 01, 01, 02, 01, 01, 01, 02, 01, 01, 01, 02, 01, 01, 01, 02, 01, 01, 01, 02, 01, 01, 01, 02, 01},
    { 01, 10, 02, 04, 02, 10, 02, 04, 02, 10, 02, 04, 02, 10, 02, 04, 02, 10, 02, 04, 02, 10, 02, 04, 02, 10, 01},
    { 01, 02, 01, 01, 01, 02, 01, 01, 01, 02, 01, 01, 01, 02, 01, 01, 01, 02, 01, 01, 01, 02, 01, 01, 01, 02, 01},
    { 01, 06, 01, 01, 01, 06, 01, 01, 01, 06, 01, 01, 01, 06, 01, 01, 01, 06, 01, 01, 01, 06, 01, 01, 01, 06, 01},
    { 01, 02, 01, 01, 01, 02, 01, 01, 01, 02, 01, 01, 01, 02, 01, 01, 01, 02, 01, 01, 01, 02, 01, 01, 01, 02, 01},
    { 01, 10, 02, 04, 02, 10, 02, 04, 02, 10, 02, 04, 02, 10, 02, 04, 02, 10, 02, 04, 02, 10, 02, 04, 02, 10, 01},
    { 01, 02, 01, 01, 01, 02, 01, 01, 01, 02, 01, 01, 01, 02, 01, 01, 01, 02, 01, 01, 01, 02, 01, 01, 01, 02, 01},
    { 01, 06, 01, 01, 01, 06, 01, 01, 01, 06, 01, 01, 01, 06, 01, 01, 01, 06, 01, 01, 01, 06, 01, 01, 01, 06, 01},
    { 01, 02, 01, 01, 01, 02, 01, 01, 01, 02, 01, 01, 01, 02, 01, 01, 01, 02, 01, 01, 01, 02, 01, 01, 01, 02, 01},
    { 01, 10, 02, 04, 02, 10, 02, 04, 02, 10, 02, 04, 02, 10, 02, 04, 02, 10, 02, 04, 02, 10, 02, 04, 02, 10, 01},
    { 01, 03, 01, 01, 01, 02, 01, 01, 01, 02, 01, 01, 01, 02, 01, 01, 01, 02, 01, 01, 01, 02, 01, 01, 01, 03, 01},
    { 01, 03, 01, 01, 01, 06, 01, 01, 01, 06, 01, 01, 01, 06, 01, 01, 01, 06, 01, 01, 01, 06, 01, 01, 01, 03, 01},
    { 01, 03, 01, 01, 01, 02, 01, 01, 01, 02, 01, 01, 01, 02, 01, 01, 01, 02, 01, 01, 01, 02, 01, 01, 01, 03, 01},
    { 01, 10, 03, 03, 03, 10, 02, 04, 02, 10, 02, 04, 02, 10, 02, 04, 02, 10, 02, 04, 02, 10, 03, 03, 03, 10, 01},
    { 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01},
};

int Map::DEFAULT_MAP[ROW_COUNT][COLUMN_COUNT] = {
    { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
    { 1, 3, 3, 3, 3, 3, 2, 4, 2, 3, 2, 4, 2, 3, 2, 4, 2, 3, 2, 4, 2, 3, 3, 3, 3, 3, 1},
    { 1, 3, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 3, 1},
    { 1, 3, 1, 1, 1, 6, 1, 1, 1, 6, 1, 1, 1, 6, 1, 1, 1, 6, 1, 1, 1, 6, 1, 1, 1, 3, 1},
    { 1, 3, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 3, 1},
    { 1, 3, 2, 4, 2, 3, 2, 4, 2, 3, 2, 4, 2, 3, 2, 4, 2, 3, 2, 4, 2, 3, 2, 4, 2, 3, 1},
    { 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1},
    { 1, 6, 1, 1, 1, 6, 1, 1, 1, 6, 1, 1, 1, 6, 1, 1, 1, 6, 1, 1, 1, 6, 1, 1, 1, 6, 1},
    { 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1},
    { 1, 3, 2, 4, 2, 3, 2, 4, 2, 3, 2, 4, 2, 3, 2, 4, 2, 3, 2, 4, 2, 3, 2, 4, 2, 3, 1},
    { 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1},
    { 1, 6, 1, 1, 1, 6, 1, 1, 1, 6, 1, 1, 1, 6, 1, 1, 1, 6, 1, 1, 1, 6, 1, 1, 1, 6, 1},
    { 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1},
    { 1, 3, 2, 4, 2, 3, 2, 4, 2, 3, 2, 4, 2, 3, 2, 4, 2, 3, 2, 4, 2, 3, 2, 4, 2, 3, 1},
    { 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1},
    { 1, 6, 1, 1, 1, 6, 1, 1, 1, 6, 1, 1, 1, 6, 1, 1, 1, 6, 1, 1, 1, 6, 1, 1, 1, 6, 1},
    { 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1},
    { 1, 3, 2, 4, 2, 3, 2, 4, 2, 3, 2, 4, 2, 3, 2, 4, 2, 3, 2, 4, 2, 3, 2, 4, 2, 3, 1},
    { 1, 3, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 3, 1},
    { 1, 3, 1, 1, 1, 6, 1, 1, 1, 6, 1, 1, 1, 6, 1, 1, 1, 6, 1, 1, 1, 6, 1, 1, 1, 3, 1},
    { 1, 3, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 3, 1},
    { 1, 3, 3, 3, 3, 3, 2, 4, 2, 3, 2, 4, 2, 3, 2, 4, 2, 3, 2, 4, 2, 3, 3, 3, 3, 3, 1},
    { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
};
int const Map::RE_DEFAULT_MAP[ROW_COUNT][COLUMN_COUNT] = {
    { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
    { 1, 3, 3, 3, 3, 3, 2, 4, 2, 3, 2, 4, 2, 3, 2, 4, 2, 3, 2, 4, 2, 3, 3, 3, 3, 3, 1},
    { 1, 3, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 3, 1},
    { 1, 3, 1, 1, 1, 6, 1, 1, 1, 6, 1, 1, 1, 6, 1, 1, 1, 6, 1, 1, 1, 6, 1, 1, 1, 3, 1},
    { 1, 3, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 3, 1},
    { 1, 3, 2, 4, 2, 3, 2, 4, 2, 3, 2, 4, 2, 3, 2, 4, 2, 3, 2, 4, 2, 3, 2, 4, 2, 3, 1},
    { 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1},
    { 1, 6, 1, 1, 1, 6, 1, 1, 1, 6, 1, 1, 1, 6, 1, 1, 1, 6, 1, 1, 1, 6, 1, 1, 1, 6, 1},
    { 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1},
    { 1, 3, 2, 4, 2, 3, 2, 4, 2, 3, 2, 4, 2, 3, 2, 4, 2, 3, 2, 4, 2, 3, 2, 4, 2, 3, 1},
    { 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1},
    { 1, 6, 1, 1, 1, 6, 1, 1, 1, 6, 1, 1, 1, 6, 1, 1, 1, 6, 1, 1, 1, 6, 1, 1, 1, 6, 1},
    { 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1},
    { 1, 3, 2, 4, 2, 3, 2, 4, 2, 3, 2, 4, 2, 3, 2, 4, 2, 3, 2, 4, 2, 3, 2, 4, 2, 3, 1},
    { 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1},
    { 1, 6, 1, 1, 1, 6, 1, 1, 1, 6, 1, 1, 1, 6, 1, 1, 1, 6, 1, 1, 1, 6, 1, 1, 1, 6, 1},
    { 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1},
    { 1, 3, 2, 4, 2, 3, 2, 4, 2, 3, 2, 4, 2, 3, 2, 4, 2, 3, 2, 4, 2, 3, 2, 4, 2, 3, 1},
    { 1, 3, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 3, 1},
    { 1, 3, 1, 1, 1, 6, 1, 1, 1, 6, 1, 1, 1, 6, 1, 1, 1, 6, 1, 1, 1, 6, 1, 1, 1, 3, 1},
    { 1, 3, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 3, 1},
    { 1, 3, 3, 3, 3, 3, 2, 4, 2, 3, 2, 4, 2, 3, 2, 4, 2, 3, 2, 4, 2, 3, 3, 3, 3, 3, 1},
    { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
};
void Map::reload()
{
    for (int col = 0; col < COLUMN_COUNT; col++)
    {
        for (int row = 0; row < ROW_COUNT; row++)
        {
            Map::Tile tile = getReTile(row, col);
            
            if (tile == Map::Tile::TileWall)
            {
                DEFAULT_MAP[row][col] = 1;
            }
            if (tile == Map::Tile::TileBlock)
            {
                DEFAULT_MAP[row][col] = 2;
            }
            if (tile == Map::Tile::TileEmpty)
            {
                DEFAULT_MAP[row][col] = 3;
            }
            if (tile == Map::Tile::TileColumnBlock)
            {
                DEFAULT_MAP[row][col] = 4;
            }
            if (tile == Map::Tile::TileRowBlock)
            {
                DEFAULT_MAP[row][col] = 6;
            }
        }
    }
}

Map::Tile Map::getReTile(int row, int column)
{
    return Tile(RE_DEFAULT_MAP[row][column]);
}

Map::Tile Map::getTile(int row, int column)
{
	return Tile(DEFAULT_MAP[row][column]);
}

bool Map::isTileIntersection(int row, int column)
{
	Map::Tile tile = Tile(INTERSECTION_MAP[row][column]);
    Map::Tile tile1 = getTile(row, column);
    if (tile == Map::Tile::TileIntersection || tile1 == Map::Tile::TileBomb)
	{
		return true;
	}
	return false;
}


bool Map::isCollision(int row, int column)
{
	Map::Tile tile = getTile(row, column);
    if (tile != Map::Tile::TileWall && tile != Map::Tile::TileBlock && tile != Map::Tile::TileBomb)
	{
		return false;
	}

	return true;
}

sf::Sprite Map::getSprite()
{
	return sprite;
}

void Map::printAdjacencyList()
{
	std::cout << "{" << std::endl;
	std::cout << "nodes\":[" << std::endl;

	for (int row = 0; row < ROW_COUNT; row++)
	{
		for (int col = 0; col < COLUMN_COUNT; col++)
		{
			if (isTileIntersection(row, col))
			{
				std::cout << "\{\"name\":" <<"\"" <<row << "_" << col << "\", \"group\" : 1}," << std::endl;
			}
		}
	}

	std::cout << "]," << std::endl;
}

Map::Map()
{
    if (!texture.loadFromFile(resourcePath() + "map3.jpg")) {
        std::cout << "Error loading resource map.bmp" << std::endl;
        return EXIT_FAILURE;
    }
	sprite.setTexture(texture);
	sprite.setScale(1.06, 1.27);
}


Map::~Map()
{
}
